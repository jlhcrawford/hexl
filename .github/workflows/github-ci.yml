# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: hexl
on:
  # By default this will run when the activity type is "opened", "synchronize",
  # or "reopened".
  pull_request:
    branches:
      - main
  # Manually run this workflow on any specified branch.
  workflow_dispatch:

###################
# Define env vars #
###################
env:
  HEXL_VER: 1.1.1
  HEXL_DIR: ${GITHUB_WORKSPACE}/lib/cmake/hexl-${HEXL_VER}
  DEFAULT_EXAMPLE_FLAGS: >
      -DHEXL_HINT_DIR=${GITHUB_WORKSPACE}/lib/cmake/hexl-${HEXL_VER}
  DEFAULT_COMPILER_FLAGS: >
      -DCMAKE_CXX_COMPILER=clang++-10
      -DCMAKE_C_COMPILER=clang-10
      -DHEXL_BENCHMARK=ON
      -DHEXL_TESTING=ON
      -DCMAKE_INSTALL_PREFIX=./
  SHARED_LIB_COMPILER_FLAGS: >
      -DHEXL_SHARED_LIB=ON
      -DHEXL_TESTING=ON
      -DHEXL_BENCHMARK=ON
      -DCMAKE_INSTALL_PREFIX=./
  DEBUG_COMPILER_FLAGS: >
      -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_CXX_COMPILER=g++-9
      -DCMAKE_C_COMPILER=gcc-9
      -DHEXL_BENCHMARK=ON
      -DHEXL_TESTING=ON
      -DHEXL_DOCS=ON
      -DHEXL_TREAT_WARNING_AS_ERROR=ON
      -DCMAKE_INSTALL_PREFIX=./
  COVERAGE_COMPILER_FLAGS: >
      -DCMAKE_BUILD_TYPE=Debug
      -DCMAKE_CXX_COMPILER=g++-9
      -DCMAKE_C_COMPILER=gcc-9
      -DHEXL_BENCHMARK=ON
      -DHEXL_TESTING=ON
      -DHEXL_COVERAGE=ON
      -DHEXL_DOCS=ON
      -DHEXL_TREAT_WARNING_AS_ERROR=ON
      -DCMAKE_INSTALL_PREFIX=./
  GCOV_BIN: /usr/bin/gcov-9

################
# Ubuntu 20.04 #
################
jobs:
  format:
    name: Format
    runs-on: ubuntu-20.04
    environment: intel_workflow
    steps:
      - uses: actions/checkout@v2
      # Required for pre-commit
      - run: pip3 install cpplint
      # NOTE: This is deprecated in favor of pre-commit.ci
      - uses: pre-commit/action@v2.0.2
        with:
          extra_args: --all-files

  default-build:
    name: Default build and test
    needs: [format]
    runs-on: ubuntu-20.04
    environment: intel_workflow
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Default Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.DEFAULT_COMPILER_FLAGS }}
          cmake --build build -j4
          cmake --install build

          # Build example
          cd example;
          cmake -S . -B build ${{ env.DEFAULT_EXAMPLE_FLAGS }}

          cmake --build build -j4
          cd ..

          # Run tests and example
          build/test/unit-test
          example/build/example
          set +x

  shared-build:
    name: Shared build and test
    needs: [format]
    runs-on: ubuntu-20.04
    environment: intel_workflow
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Shared Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.SHARED_LIB_COMPILER_FLAGS }}
          cmake --build build -j4
          cmake --install build

          # Build and run example
          cd example;
          cmake -S . -B build -DHEXL_SHARED_LIB=ON -DCMAKE_INSTALL_PREFIX=./ ${{ env.DEFAULT_EXAMPLE_FLAGS }}
          cmake --build build -j4
          build/example
          set +x

  debug-build:
    name: Debug build and test
    needs: [format]
    runs-on: ubuntu-20.04
    environment: intel_workflow
    defaults:
     run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Debug Build
        run: |
          set -x
          # Install doxygen and dependencies
          sudo apt-get install -y doxygen graphviz

          # Build library
          cmake -S . -B build ${{ env.DEBUG_COMPILER_FLAGS }}
          cmake --build build -j4 --target all docs
          cmake --install build
          build/test/unit-test

          # Build and run example
          cd example;
          cmake -S . -B build -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_INSTALL_PREFIX=./ ${{ env.DEFAULT_EXAMPLE_FLAGS }}
          cmake --build build -j4
          build/example
          set +x

  coverage-build:
    name: Coverage build, test, and benchmark
    needs: [format]
    runs-on: ubuntu-20.04
    environment: intel_workflow
    defaults:
     run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Coverage Build
        run: |
          set -x
          # Install doxygen and dependencies
          sudo apt-get install -y doxygen graphviz

          # Build library
          cmake -S . -B build ${{ env.COVERAGE_COMPILER_FLAGS }}
          cmake --build build -j4 --target all docs
          cmake --install build
          set +x

      - name: Test
        run: |
          set -x
          # Avoid putting tests in separate stage, since uploading/downloading artifacts takes a long time
          pwd
          ls
          echo ${CI_PROJECT_DIR}
          build/test/unit-test
          HEXL_DISABLE_AVX512IFMA=1 build/test/unit-test
          HEXL_DISABLE_AVX512DQ=1 build/test/unit-test
          set +x

      - name: lcov
        run: |
          set -x
          # Install lcov
          sudo apt-get install -y lcov
          lcov --capture --directory build/hexl --directory build/test/ --output-file cov_test.info

          # Remove unwanted directories
          lcov --remove cov_test.info '/usr/include/*' '/usr/lib/*' '*/test/*' '*/build/*' '*/benchmark/*' -o cov_test.info

          # Report overall summary to be parsed by gitlab CI
          lcov --list cov_test.info

          # Generate coverage html
          genhtml --branch-coverage cov_test.info --output-directory coverage
          set +x

      - name: Benchmark
        run: ./build/benchmark/bench_hexl --benchmark_out="${GITHUB_WORKFLOW}_${GITHUB_SHA}" --benchmark_out_format=csv
      - name: Archive benchmark results
        uses: actions/upload-artifact@v2
        with:
          name: bench_hexl_${{github.sha}}.csv
          path: ${{ github.workspace }}/${{ github.workflow }}_${{ github.sha }}
          retention-days: 90 # Maximum for free version

  ###############
  # Ice-lake CI #
  ###############
  format-icelake:
    name: Format (IceLake)
    runs-on: [self-hosted, Linux, X64, ice-lake]
    # Use environment protection (require review)
    environment: intel_workflow
    steps:
      - uses: actions/checkout@master
      - run: pre-commit run --all-files

  default-build-icelake:
    name: Default build and test (IceLake)
    needs: [format-icelake]
    runs-on: [self-hosted, Linux, X64, ice-lake]
    environment: intel_workflow
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Default Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.DEFAULT_COMPILER_FLAGS }}
          cmake --build build -j4
          cmake --install build

          # Build example
          cd example;
          cmake -S . -B build ${{ env.DEFAULT_EXAMPLE_FLAGS }}

          cmake --build build -j4
          cd ..

          # Run tests and example
          build/test/unit-test
          example/build/example
          set +x

  shared-build-icelake:
    name: Shared build and test (IceLake)
    needs: [format-icelake]
    runs-on: [self-hosted, Linux, X64, ice-lake]
    environment: intel_workflow
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Shared Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.SHARED_LIB_COMPILER_FLAGS }}
          cmake --build build -j4
          cmake --install build

          # Build and run example
          cd example;
          cmake -S . -B build -DHEXL_SHARED_LIB=ON -DCMAKE_INSTALL_PREFIX=./ ${{ env.DEFAULT_EXAMPLE_FLAGS }}
          cmake --build build -j4
          build/example
          set +x

  debug-build-icelake:
    name: Debug build and test (IceLake)
    needs: [format-icelake]
    runs-on: [self-hosted, Linux, X64, ice-lake]
    environment: intel_workflow
    defaults:
     run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Debug Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.DEBUG_COMPILER_FLAGS }}
          cmake --build build -j4 --target all docs
          cmake --install build
          build/test/unit-test

          # Build and run example
          cd example;
          cmake -S . -B build -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_INSTALL_PREFIX=./ ${{ env.DEFAULT_EXAMPLE_FLAGS }}
          cmake --build build -j4
          build/example
          set +x

  coverage-build-icelake:
    name: Coverage build, test, and benchmark (IceLake)
    needs: [format-icelake]
    runs-on: [self-hosted, Linux, X64, ice-lake]
    environment: intel_workflow
    defaults:
     run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Validate paths
        run: |
          whoami
          echo $HOME
          echo $GITHUB_WORKSPACE
          echo "Testing from branch:"
          echo $GITHUB_REFH
          cmake --version
          pwd
          ls

      - name: Coverage Build
        run: |
          set -x
          # Build library
          cmake -S . -B build ${{ env.COVERAGE_COMPILER_FLAGS }}
          cmake --build build -j4 --target all docs
          cmake --install build
          set +x

      - name: Test
        run: |
          set -x
          # Avoid putting tests in separate stage, since uploading/downloading artifacts takes a long time
          pwd
          ls
          echo ${CI_PROJECT_DIR}
          build/test/unit-test
          HEXL_DISABLE_AVX512IFMA=1 build/test/unit-test
          HEXL_DISABLE_AVX512DQ=1 build/test/unit-test
          set +x

      - name: lcov
        run: |
          set -x
          lcov --capture --directory build/hexl --directory build/test/ --output-file cov_test.info

          # Remove unwanted directories
          lcov --remove cov_test.info '/usr/include/*' '/usr/lib/*' '*/test/*' '*/build/*' '*/benchmark/*' -o cov_test.info

          # Report overall summary to be parsed by gitlab CI
          lcov --list cov_test.info

          # Generate coverage html
          genhtml --branch-coverage cov_test.info --output-directory coverage
          set +x

      - name: Benchmark
        run: ./build/benchmark/bench_hexl --benchmark_out="${GITHUB_WORKFLOW}_${GITHUB_SHA}" --benchmark_out_format=csv
      - name: Archive benchmark results
        uses: actions/upload-artifact@v2
        with:
          name: bench_hexl_${{github.sha}}.csv
          path: ${{ github.workspace }}/${{ github.workflow }}_${{ github.sha }}
          retention-days: 90 # Maximum for free version
